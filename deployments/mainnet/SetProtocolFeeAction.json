{
  "address": "0xcaC1fE02cB051672D93eE390136B8E10301B6709",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ExchangeProtocolFee",
          "name": "_exchangeV2",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "exchangeV2",
      "outputs": [
        {
          "internalType": "contract ExchangeProtocolFee",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "_buyerAmount",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "_sellerAmount",
          "type": "uint48"
        }
      ],
      "name": "perform",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x31795a0c3eb3f9ccad3dd33839974cfec827f785eecbf778a6ff02a27fda7584",
  "receipt": {
    "to": null,
    "from": "0x256eFfCeA2ab308D31e318728D2615545171d85B",
    "contractAddress": "0xcaC1fE02cB051672D93eE390136B8E10301B6709",
    "transactionIndex": 26,
    "gasUsed": "154010",
    "logsBloom": "0x
    "blockHash": "0x12b4cdfebb54494ca2b39aedf3f0b13d47e0bb449e800bacd6d4221d4854d662",
    "transactionHash": "0x31795a0c3eb3f9ccad3dd33839974cfec827f785eecbf778a6ff02a27fda7584",
    "logs": [],
    "blockNumber": 19176663,
    "cumulativeGasUsed": "3157779",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9757F2d2b135150BBeb65308D4a91804107cd8D6"
  ],
  "numDeployments": 1,
  "solcInputHash": "812dd857ff962489dd752a64f8c747c7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ExchangeProtocolFee\",\"name\":\"_exchangeV2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"exchangeV2\",\"outputs\":[{\"internalType\":\"contract ExchangeProtocolFee\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"_buyerAmount\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"_sellerAmount\",\"type\":\"uint48\"}],\"name\":\"perform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@rarible/upgrade-executor/src/actions/SetProtocolFeeAction.sol\":\"SetProtocolFeeAction\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-sol08/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts-sol08/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@rarible/upgrade-executor/src/actions/SetProtocolFeeAction.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./interfaces/ExchangeProtocolFee.sol\\\";\\n\\ncontract SetProtocolFeeAction {\\n    ExchangeProtocolFee public immutable exchangeV2;\\n\\n    constructor(ExchangeProtocolFee _exchangeV2) {\\n        exchangeV2 = _exchangeV2;\\n    }\\n\\n    function perform(address _receiver, uint48 _buyerAmount, uint48 _sellerAmount) external {\\n        exchangeV2.setAllProtocolFeeData(_receiver, _buyerAmount, _sellerAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x7fcc2bef47e5c95976777e091a1f8334c04528d35a95e604ff49219ff26bb011\",\"license\":\"Apache-2.0\"},\"@rarible/upgrade-executor/src/actions/interfaces/ExchangeProtocolFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-sol08/access/Ownable.sol\\\";\\n\\ncontract ExchangeProtocolFee is Ownable {\\n    ProtocolFeeData public protocolFee;\\n\\n    /// @dev event that's emitted when ProtocolFeeData buyerAmount changes\\n    event BuyerFeeAmountChanged(uint oldValue, uint newValue);\\n\\n    /// @dev event that's emitted when ProtocolFeeData sellerAmount changes\\n    event SellerFeeAmountChanged(uint oldValue, uint newValue);\\n\\n    /// @dev event that's emitted when ProtocolFeeData receiver changes\\n    event FeeReceiverChanged(address oldValue, address newValue);\\n\\n    /// @dev struct to store protocol fee - receiver address, buyer fee amount (in bp), seller fee amount (in bp)\\n    struct ProtocolFeeData {\\n        address receiver;\\n        uint48 buyerAmount;\\n        uint48 sellerAmount;\\n    }\\n\\n    function setPrtocolFeeReceiver(address _receiver) public onlyOwner {\\n        emit FeeReceiverChanged(protocolFee.receiver, _receiver);\\n        protocolFee.receiver = _receiver;\\n    }\\n\\n    function setPrtocolFeeBuyerAmount(uint48 _buyerAmount) public onlyOwner {\\n        emit BuyerFeeAmountChanged(protocolFee.buyerAmount, _buyerAmount);\\n        protocolFee.buyerAmount = _buyerAmount;\\n    }\\n\\n    function setPrtocolFeeSellerAmount(uint48 _sellerAmount) public onlyOwner {\\n        emit SellerFeeAmountChanged(protocolFee.sellerAmount, _sellerAmount);\\n        protocolFee.sellerAmount = _sellerAmount;\\n    }\\n\\n    function setAllProtocolFeeData(address _receiver, uint48 _buyerAmount, uint48 _sellerAmount) public onlyOwner {\\n        setPrtocolFeeReceiver(_receiver);\\n        setPrtocolFeeBuyerAmount(_buyerAmount);\\n        setPrtocolFeeSellerAmount(_sellerAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x2bef19d0b416e32fb1cdef5a04d635eb811fb1ab8f943cb80a8ef668c6c1d837\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161025b38038061025b83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516101cb610090600039600081816055015260c801526101cb6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063828bd7fe1461003b578063a05f32dc14610050575b600080fd5b61004e610049366004610144565b610093565b005b6100777f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b604051635ba6474d60e11b81526001600160a01b03848116600483015265ffffffffffff8085166024840152831660448301527f0000000000000000000000000000000000000000000000000000000000000000169063b74c8e9a90606401600060405180830381600087803b15801561010c57600080fd5b505af1158015610120573d6000803e3d6000fd5b50505050505050565b803565ffffffffffff8116811461013f57600080fd5b919050565b60008060006060848603121561015957600080fd5b83356001600160a01b038116811461017057600080fd5b925061017e60208501610129565b915061018c60408501610129565b9050925092509256fea2646970667358221220f8636f1ab42f906dde6f7ae76a2f5ed9ad5e74f9ae182db29a699df97f70cf0164736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063828bd7fe1461003b578063a05f32dc14610050575b600080fd5b61004e610049366004610144565b610093565b005b6100777f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b604051635ba6474d60e11b81526001600160a01b03848116600483015265ffffffffffff8085166024840152831660448301527f0000000000000000000000000000000000000000000000000000000000000000169063b74c8e9a90606401600060405180830381600087803b15801561010c57600080fd5b505af1158015610120573d6000803e3d6000fd5b50505050505050565b803565ffffffffffff8116811461013f57600080fd5b919050565b60008060006060848603121561015957600080fd5b83356001600160a01b038116811461017057600080fd5b925061017e60208501610129565b915061018c60408501610129565b9050925092509256fea2646970667358221220f8636f1ab42f906dde6f7ae76a2f5ed9ad5e74f9ae182db29a699df97f70cf0164736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}